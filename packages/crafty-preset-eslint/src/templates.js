const fs = require("fs");
const tmp = require("@swissquote/crafty-commons/packages/tmp");

/*

√: Yes
~: Maybe but not mandatory
X: Should not

| Item                        | IDE | Tool | jsLint |
| --------------------------- | --- | ---- | ------ |
| Read `crafty.config.js`     | √   | √    | X      |
| Use Crafty defaults         | √   | √    | X      |
| Extra presets from CLI      | X   | X    | √      |

*/

const ESLINT_PRESET_PATH = require.resolve("@swissquote/crafty-preset-eslint");
const CRAFTY_PATH = require.resolve("@swissquote/crafty");

/**
 * IDE Configuration generation.
 *
 * @param {Crafty} crafty
 * @returns
 */
function ideConfiguration(crafty) {
  const presets = JSON.stringify(crafty.presetsFromCli, null, 2);

  return `// AUTOGENERATED BY CRAFTY - DO NOT EDIT
// This file helps IDEs autoconfigure themselves
// any change here will only be used by your IDE, not by Crafty

/* global process */

module.exports = (async () => {
  const { initialize } = await import("@swissquote/crafty");
  const { toESLintConfig } = await import("@swissquote/crafty-preset-eslint");
  
  const crafty = await initialize(process.argv, ${presets});
  
  const config = await toESLintConfig(crafty, {}, "ide");
  
  return config;
})();
`;
}

/**
 * Configuration for other tools
 *
 * @param {Crafty} crafty
 * @returns
 */
function toolConfiguration(crafty) {
  const presets = JSON.stringify(crafty.presetsFromCli, null, 2);

  return `// AUTOGENERATED BY CRAFTY - DO NOT EDIT

import { initialize } from "${CRAFTY_PATH}";
import { toESLintConfig } from "${ESLINT_PRESET_PATH}";

const crafty = await initialize(process.argv, ${presets});

const config = await toESLintConfig(crafty, {});

export default config;
`;
}

/**
 * Configuration for jsLint command
 *
 * @returns
 */
function jsLintConfiguration(extraConfig) {
  return `// AUTOGENERATED BY CRAFTY - DO NOT EDIT
import { initialize } from "${CRAFTY_PATH}";
import { toESLintConfig } from "${ESLINT_PRESET_PATH}";

const extraConfig = ${JSON.stringify(extraConfig, null, 2)};

const config = await toESLintConfig(null, extraConfig, "jsLint");

export default config;
`;
}

function toTempFile(content) {
  const tmpfile = tmp.fileSync({ postfix: ".mjs" }).name;

  fs.writeFileSync(tmpfile, content);

  return tmpfile;
}

module.exports = {
  ideConfiguration,
  toolConfiguration,
  jsLintConfiguration,
  toTempFile
};
