import { createLinter } from "./gulp.js";
import { createRequire } from "node:module";

const require = createRequire(import.meta.url);

function addNoVariableInTranspiledFunction(rules, browsers) {
  const rule = "swissquote/no-variable-in-transpiled-function";

  if (!rules[rule]) {
    rules[rule] = [true, {}];
  }

  if (!rules[rule][1].severity) {
    rules[rule][1].severity = "warning";
  }

  if (!rules[rule][1].browsers) {
    rules[rule][1].browsers = browsers;
  }
}

export default {
  presets: [require.resolve("@swissquote/crafty-preset-prettier")],
  defaultConfig() {
    return {
      // Enable this to be easier on the developer
      legacy_css: false,

      // Stylelint pattern
      stylelint_pattern: [
        "css/**/*.scss",
        "css/**/*.css",
        "!*.min.css",
        "!**/vendor/**/*.scss",
        "!**/vendor/**/*.css",
        "!**/vendor/*.scss",
        "!**/vendor/*.css"
      ],

      // Stylelint modern configuration
      stylelint: {
        plugins: [require.resolve("@swissquote/stylelint-config-swissquote")],
        extends: ["@swissquote/stylelint-config-swissquote/recommended"].map(
          require.resolve
        ),
        rules: {}
      },

      // Stylelint legacy configuration
      stylelint_legacy: {
        extends: ["@swissquote/stylelint-config-swissquote/legacy"].map(
          require.resolve
        ),
        rules: {}
      }
    };
  },
  config(config) {
    // Set prettier configuration for CSS
    config.prettier.overrides = config.prettier.overrides || [];
    config.prettier.overrides.push({
      files: ["*.css", "*.scss"],
      options: { tabWidth: 4 }
    });

    // Add rules that need the current browsers configurations
    addNoVariableInTranspiledFunction(config.stylelint.rules, config.browsers);

    return config;
  },
  commands() {
    return {
      cssLint: {
        async command(crafty, input, cli) {
          await import("./commands/lint_css.js");
        },
        description: "Lint CSS for errors"
      }
    };
  },
  gulp(crafty, gulp /*, StreamHandler */) {
    // CSS Linter
    const lintTaskName = "css__lint";
    crafty.watcher.add(crafty.config.stylelint_pattern, lintTaskName);
    createLinter(gulp, crafty, lintTaskName);
    crafty.addDefaultTask(lintTaskName);
  },
  ide() {
    return {
      "stylelint.config.mjs": {
        shouldIgnore: false,
        alternativeFiles: ["stylelint.config.js"],
        content: `// AUTOGENERATED BY CRAFTY - DO NOT EDIT
// This file helps IDEs autoconfigure themselves
// any change here will only be used by your IDE, not by Crafty

/* global process */
import { initialize } from "@swissquote/crafty";

const crafty = await initialize(process.argv);

const config = crafty.config.legacy_css
  ? crafty.config.stylelint_legacy
  : crafty.config.stylelint;
export default config;
`
      }
    };
  }
};
